plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    //accessWidenerPath = project(":common_mod_server").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "chat-emotes.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileOnly.extendsFrom common
    runtimeOnly.extendsFrom common
    implementation.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    implementation "thedarkcolour:kotlinforforge:4.2.0"

    common(project(path: ":mod:common_mod_server", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":mod:common_mod_server", configuration: "transformProductionForge")) { transitive = false }
    common project(":common_server")
    shadowCommon project(":common_server")
}

processResources {
    inputs.properties(
            "version": project.version,
            "mod_name": rootProject.mod_name,
            "mod_description": rootProject.mod_description,
    )

    filesMatching("META-INF/mods.toml") {
        expand(
                "version": project.version,
                "mod_name": rootProject.mod_name,
                "mod_description": rootProject.mod_description,
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":mod:common_mod_server").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}