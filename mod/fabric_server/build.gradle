plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    //accessWidenerPath = project(":common_mod_server").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileOnly.extendsFrom common
    runtimeOnly.extendsFrom common
    implementation.extendsFrom common
    developmentFabric.extendsFrom common

    // The addModJar basically embeds the mod to the built jar
    //addModJar
    //include.extendsFrom addModJar
    //modImplementation.extendsFrom addModJar
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:1.9.5+kotlin.1.8.22"

    // Fabric API
    //addModJar(fabricApi.module("fabric-api", rootProject.fabric_api_version))
    //addModJar(fabricApi.module("fabric-command-api-v2", rootProject.fabric_api_version))
    //addModJar(fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api_version))
    //addModJar(fabricApi.module("fabric-key-binding-api-v1", rootProject.fabric_api_version))
    //addModJar(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version))
    //addModJar(fabricApi.module("fabric-message-api-v1", rootProject.fabric_api_version))
    //addModJar(fabricApi.module("fabric-api-base", rootProject.fabric_api_version))

    // Mod Menu
    //modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    common(project(path: ":mod:common_mod_server", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":mod:common_mod_server", configuration: "transformProductionFabric")) { transitive false }
    common project(":common_server")
    shadowCommon project(":common_server")
}

processResources {
    inputs.properties(
            version: project.version,
            mod_name: rootProject.mod_name,
            mod_description: rootProject.mod_description,
    )

    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "mod_name": rootProject.mod_name,
                "mod_description": rootProject.mod_description,
        )
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":mod:common_mod_server").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}