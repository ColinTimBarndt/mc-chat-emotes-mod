{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://colintimbarndt.github.io/fabric_chat-emotes/schema/types/unicode.schema.json",
  "title": "Chat Emotes",
  "description": "Defines all emotes of this resource",
  "$defs": {
    "aliases": {
      "title": "Aliases",
      "description": "Players can refer to emotes using `:alias:`",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^[\\da-z_]+$"
        },
        {
          "type": "array",
          "additionalItems": {
            "$ref": "#/$defs/aliases/oneOf/0"
          }
        }
      ]
    },
    "joiners": {
      "title": "Joiners",
      "description": "Creates a name from the matched groups of a pattern",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^([\\da-z_]|\\{[^}]*\\})+$"
        },
        {
          "type": "array",
          "additionalItems": {
            "$ref": "#/$defs/joiners/oneOf/0"
          }
        }
      ]
    },
    "java_template": {
      "type": "string",
      "pattern": "^([^%]|%(%|(\\d+\\$)?s))*$"
    }
  },
  "type": "object",
  "required": [
    "symbols"
  ],
  "properties": {
    "symbols": {
      "title": "Symbols",
      "description": "Defines all symbols in this resource",
      "type": "object",
      "patternProperties": {
        "^[\\da-fA-F]{1,6}$": {
          "$ref": "#/$defs/aliases"
        },
        "^[\\da-fA-F]{1,6}-[\\da-fA-F]{1,6}$": {
          "title": "Range",
          "description": "Covers a range of code points",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/aliases"
              },
              {
                "title": "Empty",
                "description": "Skips a number of code points",
                "type": "integer",
                "minimum": 1
              }
            ]
          }
        },
        "^([Ee+]|T\\([\\da-z]*\\)|U\\{!?[\\da-zA-Z]+(-[\\da-zA-Z]+)?(\\|[\\da-zA-Z]+(-[\\da-zA-Z]+)?)*(#(\\d+|(\\*(?!-)))(-\\d+)?(&([^}]*))?)?\\}|L?\\{!?[^}]*?\\})+$": {
          "title": "Pattern",
          "description": "Matches code points using a regular expression",
          "$ref": "#/$defs/joiners"
        }
      },
      "additionalProperties": false
    },
    "modifiers": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "required": ["values"],
        "properties": {
          "priority": {
            "description": "Higher priority modifiers are applied first, a low priority will for example add a suffix to the very end of an alias",
            "type": "integer"
          },
          "format": {
            "description": "Formats the alias using this format string with the first argument being the alias and the second the value of this modifier",
            "$ref": "#/$defs/java_template"
          },
          "zwj": {
            "description": "Whether values must come after a unicode zero-width join code point",
            "type": "boolean"
          },
          "vs16": {
            "description": "Whether values must have a variation selector 16 (Emoji Variant)",
            "type": "boolean"
          },
          "values": {
            "type": "object",
            "patternProperties": {
              "^([\\da-fA-F]{1,6}|[\\da-z_]+)$": {
                "$ref": "#/$defs/aliases"
              }
            },
            "additionalProperties": false
          }
        },
        "oneOf": [
          {
            "additionalProperties": false
          },
          {
            "required": ["default", "replace"],
            "properties": {
              "default": {
                "description": "Default index for format when no replace pattern matches",
                "type": "number"
              },
              "replace": {
                "description": "Matches patterns against the aliases and replaces the first match with the value of the same index as the pattern",
                "oneOf": [
                  {
                    "type": "string",
                    "format": "regex"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "regex"
                    }
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      }
    },
    "emoticons": {
      "description": "Defines character combinations that should result in an emote when surrounded by spaces",
      "type": "object",
      "patternProperties": {
        "^[\\da-z_]+$": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}